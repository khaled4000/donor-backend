const mongoose = require('mongoose');

const donationSchema = new mongoose.Schema({
  // Unique donation ID
  donationId: {
    type: String,
    required: false, // Will be auto-generated by pre-save hook
    unique: true,
    index: true,
  },

  // References
  caseId: {
    type: String,
    required: true,

  },
  caseObjectId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Case',
    required: true,
    index: true,
  },
  donorId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true,
  },

  // Donor information (denormalized for performance)
  donorName: {
    type: String,
    required: true,
    trim: true,
  },
  donorEmail: {
    type: String,
    required: true,
    lowercase: true,
    index: true,
  },

  // Family/Case information (denormalized)
  familyName: {
    type: String,
    required: true,
    trim: true,
  },
  location: {
    type: String,
    required: true,
    trim: true,
  },
  village: {
    type: String,
    required: true,
    trim: true,
    index: true,
  },

  // Donation details
  amount: {
    type: Number,
    required: true,
    min: 0.01,
  },
  currency: {
    type: String,
    default: 'USD',
    enum: ['USD', 'LBP', 'EUR'],
  },

  // Payment information
  paymentMethod: {
    type: String,
    enum: ['credit_card', 'paypal', 'bank_transfer', 'cash', 'other'],
    default: 'credit_card',
  },
  transactionId: {
    type: String,
    trim: true,
    index: true,
  },
  paymentStatus: {
    type: String,
    enum: ['pending', 'completed', 'failed', 'refunded'],
    default: 'completed',
    index: true,
  },

  // Donation preferences
  anonymous: {
    type: Boolean,
    default: false,
  },
  message: {
    type: String,
    trim: true,
    maxlength: 500,
  },

  // Timestamps
  donationDate: {
    type: Date,
    default: Date.now,
    index: true,
  },
  processedAt: {
    type: Date,
  },

  // Metadata
  source: {
    type: String,
    default: 'donor_dashboard',
    enum: ['donor_dashboard', 'direct_link', 'campaign', 'admin'],
  },
  ipAddress: {
    type: String,
    trim: true,
  },
  userAgent: {
    type: String,
    trim: true,
  },
});

// Generate unique donation ID before saving
donationSchema.pre('save', function(next) {
  if (!this.donationId) {
    this.donationId = `DON-${Date.now().toString()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;
  }

  // Set processed timestamp for completed donations
  if (this.paymentStatus === 'completed' && !this.processedAt) {
    this.processedAt = new Date();
  }

  next();
});

// Static methods for analytics
donationSchema.statics.getTotalDonationsByUser = async function(userId) {
  const result = await this.aggregate([
    { $match: { donorId: new mongoose.Types.ObjectId(userId), paymentStatus: 'completed' } },
    { $group: {
      _id: null,
      totalAmount: { $sum: '$amount' },
      totalDonations: { $sum: 1 },
      uniqueCases: { $addToSet: '$caseObjectId' },
    }},
    { $project: {
      _id: 0,
      totalAmount: 1,
      totalDonations: 1,
      familiesHelped: { $size: '$uniqueCases' },
    }},
  ]);

  return result[0] || { totalAmount: 0, totalDonations: 0, familiesHelped: 0 };
};

donationSchema.statics.getTotalDonationsByCase = async function(caseId) {
  const result = await this.aggregate([
    { $match: { caseId: caseId, paymentStatus: 'completed' } },
    { $group: {
      _id: null,
      totalRaised: { $sum: '$amount' },
      donationCount: { $sum: 1 },
      uniqueDonors: { $addToSet: '$donorId' },
    }},
    { $project: {
      _id: 0,
      totalRaised: 1,
      donationCount: 1,
      uniqueDonors: { $size: '$uniqueDonors' },
    }},
  ]);

  return result[0] || { totalRaised: 0, donationCount: 0, uniqueDonors: 0 };
};

donationSchema.statics.getMonthlyDonations = async function(userId, year, month) {
  const startDate = new Date(year, month - 1, 1);
  const endDate = new Date(year, month, 0);

  const result = await this.aggregate([
    {
      $match: {
        donorId: new mongoose.Types.ObjectId(userId),
        paymentStatus: 'completed',
        donationDate: { $gte: startDate, $lte: endDate },
      },
    },
    { $group: {
      _id: null,
      totalAmount: { $sum: '$amount' },
      totalDonations: { $sum: 1 },
    }},
  ]);

  return result[0] || { totalAmount: 0, totalDonations: 0 };
};

// Instance methods
donationSchema.methods.getDisplayName = function() {
  return this.anonymous ? 'Anonymous Donor' : this.donorName;
};

donationSchema.methods.formatAmount = function() {
  return `${this.currency} ${this.amount.toLocaleString()}`;
};

// Indexes for better performance
donationSchema.index({ donorId: 1, donationDate: -1 });
donationSchema.index({ caseId: 1, donationDate: -1 });
donationSchema.index({ caseObjectId: 1, paymentStatus: 1 });
donationSchema.index({ donorEmail: 1, donationDate: -1 });
donationSchema.index({ village: 1, donationDate: -1 });
donationSchema.index({ paymentStatus: 1, donationDate: -1 });
donationSchema.index({ donationDate: -1 }); // For recent donations

module.exports = mongoose.model('Donation', donationSchema);
